% GUI for new conduction velocity analysis
% Inputs: 
% NewconductionVelocityGroup -- pannel to draw on
% handles     -- rhythm handles
% f           -- figure of the main rhythm window
% 
% by Roman Pryamonosov, Roman Syunyaev, and Alexander Zolotarev

function GUI_NewConductionVelocity(NewconductionVelocityGroup, handles, f)
% New pushbutton with callback definition.

calc_CV = uicontrol('Parent',NewconductionVelocityGroup,'Style','pushbutton',...
    'FontSize',10,'String','Calculate CV',...
    'Units','normalized','Position',[.01 .2 .9 .09],...
    'Callback',{@calc_CV_callback});
gen_vecmap = uicontrol('Parent',NewconductionVelocityGroup,'Style','pushbutton',...
    'FontSize',10,'String','Generate Vec. Map',...
    'Units','normalized','Position',[.01 .4 .9 .09],...
    'Callback',{@gen_vecmap_callback});
draw_line=uicontrol('Parent',NewconductionVelocityGroup,'Style','pushbutton',...
    'FontSize',10,'String','Draw Line',...
    'Units','normalized','Position',[.01 .3 .9 .09],...
    'Callback',{@draw_line_callback});
%gen_hist_cv=uicontrol('Parent',anal_data,'Style','pushbutton','FontSize',12,'String','generate CV histrogram','Position',[145 5 150 30],'Callback',{@gen_hist_cv_callback});

% Start and End time
starttimemap_text = uicontrol('Parent',NewconductionVelocityGroup,'Style','text',...
    'FontSize',10,'String','Start Time',...
    'Units','normalized','Position',[.01 .9 .7 .09],'HorizontalAlignment','left',...
    'Visible','on');
starttimevolt_edit = uicontrol('Parent',NewconductionVelocityGroup,'Style','edit',...
    'FontSize',10,'Units','normalized','Position',[0.75 0.9 .2 .09],...
    'Visible','on','Callback', @startTime_callback);
endtimemap_text = uicontrol('Parent',NewconductionVelocityGroup,'Style','text',...
    'FontSize',10,'String','End Time',...
    'Units','normalized','Position',[.01 .8 .7 .09],'HorizontalAlignment','left','Visible','on');
endtimevolt_edit = uicontrol('Parent',NewconductionVelocityGroup,'Style','edit',...
    'FontSize',10,'Units','normalized','Position',[.75 .8 .2 .09],...
    'Visible','on', 'Callback', @endTime_callback);

%CV interpixel distance
interpixel_text = uicontrol('Parent',NewconductionVelocityGroup,'Style','text',...
    'FontSize',10,'String','Interpixel Distance',...
    'Units','normalized','Position',[.01 .7 .8 .09],...
    'HorizontalAlignment','left','Visible','on');

xdist_text = uicontrol('Parent',NewconductionVelocityGroup,'Style','text',...
    'FontSize',10,'String','x(mm)','Units','normalized',...
    'Position',[.01 .6 .7 .09],'Visible','on');
xdist_edit = uicontrol('Parent',NewconductionVelocityGroup,'Style','edit',...
    'FontSize',10,'Units','normalized','Position',[0.75 0.6 .2 .09],...
    'Visible','on');

ydist_text = uicontrol('Parent',NewconductionVelocityGroup,'Style','text',...
    'FontSize',10,'String','y(mm)','Units','normalized',...
    'Position',[.01 .5 .7 .09],'Visible','on');
ydist_edit = uicontrol('Parent',NewconductionVelocityGroup,'Style','edit',...
    'FontSize',10,'Units','normalized','Position',[0.75 0.5 .2 .09],...
    'Visible','on');

export_icon = imread('icon.png');
export_icon = imresize(export_icon, [20, 20]);                           
export_button = uicontrol('Parent',NewconductionVelocityGroup,'Style','pushbutton',...
                        'Units','normalized',...
                        'Position',[0.75, 0, 0.15, 0.15]...
                        ,'Callback',{@export_button_callback});

numOfLevels_text = uicontrol('Parent',NewconductionVelocityGroup,'Style','text',...
    'FontSize',10,'String','step len(ms)',...
    'Units','normalized','Position',[0 0 .35 .15],'HorizontalAlignment','left',...
    'Visible','on');
numOfLevels_edit = uicontrol('Parent',NewconductionVelocityGroup,'Style','edit',...
    'FontSize',10,'Units','normalized','Position',[0.35 0 .25 .15],...
    'Visible','on','Callback', @numOfLevels_callback);
                    
set(export_button,'CData',export_icon) 
set(starttimevolt_edit, 'String', '0.3');
set(endtimevolt_edit, 'String', '0.35');
set(xdist_edit, 'String', '0.1');
set(ydist_edit, 'String', '0.1');
startTime_callback(starttimevolt_edit);
set(numOfLevels_edit,'String',num2str( 1./ handles.activeCamData.Fs));
numOfLevels_callback(numOfLevels_edit);

    % Save handles in figure with handle f.
    guidata(NewconductionVelocityGroup, handles);
    
    
%%
    function numOfLevels_callback(source,~)
        startTime = str2double(get(starttimevolt_edit,'String')); 
        endTime = str2double(get(endtimevolt_edit,'String'));
        val_map_step = str2double(get(source,'String'));
        if (val_map_step < 1 / handles.activeCamData.Fs)
            set(source,'String', num2str(1 / handles.activeCamData.Fs));
            val_map_step = 1 / handles.activeCamData.Fs;
        end
        if (val_map_step >= (endTime - startTime))
            set(source,'String', num2str((endTime - startTime)));
            val_map_step = endTime - startTime;
        end
        
%         handles.numOfContourLevels = round(val_map_step * handles.activeCamData.Fs)+1;
        handles.numOfContourLevels = round((endTime - startTime) / val_map_step) + 1;
    end
    %% callback functions
    function startTime_callback(source,~)
        val_start = str2double(get(source,'String'));
        val_end = str2double(get(endtimevolt_edit,'String'));
        if (val_start < 0)
            set(source,'String', 0);
            val_start = 0;
        end
        if (val_start >= val_end)
            set(source,'String', num2str(val_start));
            val_start = val_end;
            val_end = val_start+0.01;
            set(endtimevolt_edit,'String', num2str(val_end));
            set(source,'String', num2str(val_start));
        end
        drawTimeLines(val_start, val_end, handles, f);
        set(numOfLevels_edit,'String', num2str( 1./handles.activeCamData.Fs));
        numOfLevels_callback(numOfLevels_edit);
    end

    function endTime_callback(source,~)
        val_start = str2double(get(starttimevolt_edit,'String'));
        val_end = str2double(get(source,'String'));
        if (val_start >= val_end)
            set(source,'String', num2str(val_start+0.01));
            val_end = val_start+0.01;
        end
        drawTimeLines(val_start, val_end, handles, f);
        set(numOfLevels_edit,'String', num2str( 1./handles.activeCamData.Fs));
        numOfLevels_callback(numOfLevels_edit);
    end 

    function drawTimeLines(val_start, val_end, handles, f)
        if val_start >= 0 && val_start <= handles.time(end)
            if val_end >= 0 && val_end <= handles.time(end)
                % set boundaries to draw time lines
                pointB = [0 1]; 
                playTimeA = [(handles.time(handles.frame)-handles.starttime)*handles.timeScale (handles.time(handles.frame)-handles.starttime)*handles.timeScale];
                startLineA = [(val_start-handles.starttime)*handles.timeScale (val_start-handles.starttime)*handles.timeScale]; 
                endLineA = [(val_end-handles.starttime)*handles.timeScale (val_end-handles.starttime)*handles.timeScale];
                if (handles.bounds(handles.activeScreenNo) == 0)
                    set(f,'CurrentAxes',handles.sweepBar); cla;
                    plot(startLineA, pointB, 'g', 'Parent', handles.sweepBar)
                    hold on
                    axis([0 handles.time(end) 0 1])
                    plot(playTimeA, pointB, 'r', 'Parent', handles.sweepBar)
                    hold on
                    plot(endLineA, pointB, '-g','Parent',handles.sweepBar)
                    hold off; axis off
                    hold off 
                else
                    hold on
                    for i_group=1:5
                        set(f,'CurrentAxes',handles.signalGroup(i_group).sweepBar); cla;
                        plot(startLineA, pointB, 'g', 'Parent', handles.signalGroup(i_group).sweepBar)
                        hold on;
                        plot(playTimeA, pointB, 'r', 'Parent', handles.signalGroup(i_group).sweepBar)
                        hold on;
                        plot(endLineA, pointB, '-g','Parent', handles.signalGroup(i_group).sweepBar)
                        axis([0 handles.time(end) 0 1])
                        hold off; axis off;
                        hold off;
                    end
                    
                end
            else
                error = 'The END TIME must be greater than %d and less than %.3f.';
                msgbox(sprintf(error,0,max(handles.time)),'Incorrect Input','Warn');
                set(endtimeamap_edit,'String',max(handles.time))
            end
        else
            error = 'The START TIME must be greater than %d and less than %.3f.';
            msgbox(sprintf(error,0,max(handles.time)),'Incorrect Input','Warn');
            set(starttimeamap_edit,'String',0)
        end
    end


    %% Calculate CV and Generate Vector Map
    function gen_vecmap_callback(~,~)
        % get the bounds of the conduction velocity window
        c_start = str2double(get(starttimevolt_edit,'String'));
        c_end = str2double(get(endtimevolt_edit,'String'));
        
        drawTimeLines(c_start, c_end, handles, f);
        handles.c_start = c_start;
        handles.c_end = c_end;
        
        handles.activeCamData.xres = str2double(get(xdist_edit,'String'));
        handles.activeCamData.yres = str2double(get(ydist_edit,'String'));
        set(f,'CurrentAxes',handles.activeScreen);        
        axis([1 100 1 100]);
        %axis ij;
        rect = getrect(handles.activeScreen);
        gg=msgbox('Building Conduction Velocity Map...');
        cMap(handles.activeCamData.cmosData,handles.c_start,handles.c_end,...
            handles.activeCamData.Fs,handles.activeCamData.bg,rect, f,...
            handles.activeScreen, handles);
        handles.activeCamData.drawMap=1;
        close(gg)

end

%% Draw line to select vectors
    function draw_line_callback(~,~)
        Line = [];
        set(f,'CurrentAxes',handles.activeScreen);        
        axis([1 100 1 100]);
        Line=getline(handles.activeScreen);
        handles.Line = Line;
    end


%% Calculate Average CV in given direction
    function calc_CV_callback(~,~)
       %Get variables and line start, end and angle 
       VecArray = handles.activeCamData.VecArray;
       Line = handles.Line;
       XLine(1) = Line(1,1);
       XLine(2) = Line(2,1);
       YLine(1) = Line(1,2);
       YLine(2) = Line(2,2);
    
        LineAngle = 180/pi*atan2((YLine(2)-YLine(1)),(XLine(2)-XLine(1)));
        %if LineAngle<0
        %       LineAngle = LineAngle + 360;
       % end
       
       Member = 0;
       X1 = round(XLine);
       Y1 = round(YLine);
       P1 = [XLine(1) YLine(1) 0]';   %1 point of the Line coordinates
       P2 = [XLine(2) YLine(2) 0]';   %2 point of the Line coordinates
       
       X = VecArray(:,1);
       Y = VecArray(:,2);
       Vx = VecArray(:,3);
       Vy = VecArray(:,4);
       VecMag = VecArray(:,5);
       V = [X Y];      
       PixDist = 5;                   %All points within this distance (in pixels) will be included
       VecAngleNew =[];
       VecMagNew=zeros(size(VecMag));
       
       % For all pixels within range of line
       for row = min(Y1)-PixDist:1:max(Y1)+PixDist
           for col = min(X1)-PixDist:1:max(X1)+PixDist
               point=[col row 0]';         %is point within PixDist from the line rectangle?
               dist=norm(cross([P1-P2],[point-P2]))/norm(P1-P2); %distance from point to line going through P1,P2
               
               if dist<PixDist & dot(P1-P2,point-P2)>=0 & dot(P1-P2,point-P2)<=dot(P1-P2,P1-P2) % Is the distance withtin PixDist & point within range in P1-P2 direction?
                        Pixel=[col row];
               else
                        Pixel=[-1 -1]; 
               end
                             
               TempChan = find((V(:,1)==Pixel(1) & V(:,2)==Pixel(2)));
               if ~isempty(TempChan) 
%                    if ((Vx(TempChan)<0 & Vy(TempChan)>0)) | ((Vx(TempChan)>0 & Vy(TempChan)<0))
%                        VecAngle = 180/pi*(atan2(-Vy(TempChan),Vx(TempChan)))+360;
%                    else
%                        VecAngle=180/pi*(atan2(-Vy(TempChan),Vx(TempChan)));
%                    end
                    
%                    if LineAngle>270 & VecAngle<90 
%                        VecAngle=VecAngle+360;
%                    elseif LineAngle<90 & VecAngle>270 
%                        VecAngle=VecAngle-360;
%                    end
        
                    VecAngle=180/pi*(atan2(-Vy(TempChan),Vx(TempChan)));
                    %if VecAngle<0
                    %    VecAngle=VecAngle+360;
                   % end
                
                
                    %Check angle from line
                    Arc=15;%15
                    lowlineangle=(LineAngle-Arc);
                    highlineangle=(LineAngle+Arc);
                    a=VecAngle;
%lowlineangle may be less the -pi or highlineangle may be more then pi
                    if (lowlineangle<a & a<highlineangle)|(lowlineangle<(a-360) & (a-360)<highlineangle)|(lowlineangle<(a+360) & (a+360)<highlineangle)
                        VecAngleNew(TempChan) = VecAngle;
                        VecMagNew(TempChan) = VecMag(TempChan);
                        %Analysismap('Marker',VecMap,Pixel); %
                    end
               end
           end
       end
       handles.activeCamData.drawMap = 1;
       %higlight quivers included in calculation by black
       cla(handles.activeScreen); 
       startp = round(handles.c_start*handles.activeCamData.Fs);
       endp = round(handles.activeCamData.Fs*handles.c_end);
       contourf(handles.activeScreen, handles.activeCamData.saveData,(endp-startp)/2,'LineColor','k');
        %caxis(movie_scrn,[stat endp]);
        contourcmap('copper','SourceObject', handles.activeScreen);
        %colorbar(movie_scrn);
        set(handles.activeScreen,'YTick',[],'XTick',[]);
        hold on
       quiver( handles.activeScreen, X, Y,Vx, -1.0 * Vy,'b');
       hold on
       Vx(VecMag~=VecMagNew)=0;
       Vy(VecMag~=VecMagNew)=0;
       
       quiver_step = 2;
       q = quiver( handles.activeScreen, X(1:quiver_step:end),...
                   Y(1:quiver_step:end),Vx(1:quiver_step:end),...
                   -1.0 * Vy(1:quiver_step:end),'w');      
       q.LineWidth = 2;
       q.AutoScaleFactor = 2;
       
       set( handles.activeScreen,'YDir','reverse');
    
       xlim(handles.activeScreen,[1 100]);
       ylim(handles.activeScreen,[1 100]);
       
       axis (handles.activeScreen,'off')

       
       % Calculate Statistics
       %VecMagNew(VecMagNew==0)=NaN;
       %cla( handles.activeScreen);       
       CVmag_mean=nanmean(nonzeros(VecMagNew(:)));
       CVmag_std=nanstd(nonzeros(VecMagNew(:)));
       CVmag_median=nanmedian(nonzeros(VecMagNew(:)));
       CVmag_members = numel(VecMagNew(isfinite(nonzeros(VecMagNew))));
       CVang_mean = nanmean(nonzeros(VecAngleNew(:)));

       % Output results
       handles.activeCamData.meanresults = sprintf('Mean: %0.3f',CVmag_mean);
       handles.activeCamData.medianresults  = sprintf('Median: %0.3f',CVmag_median);
       handles.activeCamData.SDresults = sprintf('S.D.: %0.3f',CVmag_std);
       handles.activeCamData.num_membersresults = sprintf('#Members: %d',CVmag_members);
       handles.activeCamData.angleresults = sprintf('Angle: %d',CVang_mean);
       
       set(handles.meanresults,'String',handles.activeCamData.meanresults);
       set(handles.medianresults,'String',handles.activeCamData.medianresults);
       set(handles.SDresults,'String',handles.activeCamData.SDresults);
       set(handles.num_members_results,'String',handles.activeCamData.num_membersresults);
       set(handles.angleresults,'String',handles.activeCamData.angleresults);
    end
%% Export picture from the screen
    function export_button_callback(~,~)  
       if isempty(handles.activeCamData.saveData)
           error = 'ExportedData must exist! Function cancelled.';
           msgbox(error,'Incorrect Input','Error');
           return
       else
        figure;
 
            startp = round(handles.c_start*handles.activeCamData.Fs);
            endp = round(handles.activeCamData.Fs*handles.c_end);
            contourf(flipud(handles.activeCamData.saveData), handles.numOfContourLevels,'LineColor','k');
            hold on;
            sz=size(handles.activeCamData.saveData);
            quiver_step = 2;
            q = quiver(handles.activeCamData.saveX_plot(1:quiver_step:end),...
                   sz(2)-handles.activeCamData.saveY_plot(1:quiver_step:end),...
                   handles.activeCamData.saveVx_plot(1:quiver_step:end), ...
                   handles.activeCamData.saveVy_plot(1:quiver_step:end),'w');
            q.LineWidth = 2;
            q.AutoScaleFactor = 2;
            hold off;

            colormap (handles.activeCamData.screen, copper ); 
            colorbar;
       end
    end
end  